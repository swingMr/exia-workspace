<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
	http://www.springframework.org/schema/context  
	http://www.springframework.org/schema/context/spring-context-3.1.xsd  
	http://www.springframework.org/schema/mvc  
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd">
	<!-- 自动扫描 -->
	<!-- <context:component-scan base-package="com.etc" /> -->
	<!-- 引入配置文件 -->
	
	<context:component-scan base-package="com.excellence.iamp" />
	<context:component-scan base-package="com.excellence.iaserver" />
	<mvc:annotation-driven />
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="jdbc/exia"></property>
		<property name="resourceRef" value="true" /> 
	</bean>
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/excellence/iamp/mapper/*.xml"></property>
		<!-- 别名定义 -->
		<property name="configLocation" value="/WEB-INF/mybatis-config.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.excellence.iamp.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
		   <list>
		    <value>file:${oapath}/exiaserver/memcached.properties</value>
		    <value>file:${oapath}/exiaserver/mongodb.properties</value>
		   </list>
		  </property>
	</bean>
	<bean id="DocConvertService" class="com.excellence.iaserver.service.impl.DocConvertServiceImpl">
		<property name="libreofficeConverter" ref="libreofficeConverter"></property>
	</bean>
	<!-- 文本转换服务 -->
	<bean id="libreofficeConverter" class="com.excellence.iaserver.common.util.LibreofficeConverter" init-method="init" destroy-method="destroy" >
	</bean>
	
	<!-- memcached配置 -->
	<bean id="mccSocketIOPool" class="com.danga.MemCached.SockIOPool"
          factory-method="getInstance"
          init-method="initialize"
          destroy-method="shutDown"
          p:servers="${memcached.servers}"
          p:maxConn="${memcached.maxConn}"
          p:initConn="${memcached.initConn}"
          p:socketConnectTO="${memcached.socketConnectTo}"
          p:socketTO="${memcached.socketTO}"
          p:maintSleep="${memcached.maintSleep}"
          p:failover="${memcached.failover}"
          p:failback="${memcached.failback}"
          p:nagle="${memcached.nagle}" >
          <constructor-arg value="iaserver"/>
    </bean>
    
    <bean id="mcc" class="com.danga.MemCached.MemCachedClient" p:sanitizeKeys="false" >
        <constructor-arg value="iaserver"/><!-- pool名称 -->
    </bean>
    
    <bean id="cacheClient" class="com.excellence.iaserver.common.cache.CacheClient">
    	<property name="mcc" ref="mcc"></property>
    </bean>
    
    <bean id="quartzScheduler"  class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!-- quartz的基本配置信息引入 -->
        <property name="configLocation">
			<value>file:${oapath}/exiaserver/quartz.properties</value>
		</property> 
		<!-- 调度标识名 -->
        <property name="schedulerName" value="DefaultQuartzScheduler" />
        <!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
        <property name="startupDelay" value="30" />
        <!-- 通过applicationContextSchedulerContextKey属性配置spring上下文 -->
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey" />
        <!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
        <property name="overwriteExistingJobs" value="true" />
        <!-- 设置自动启动 -->
        <property name="autoStartup" value="true" />
    </bean>  
    
	<import resource="mongo-config.xml" />
</beans>